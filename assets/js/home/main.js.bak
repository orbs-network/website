$(() => {

    const globeController = initGlobe()

    globeController.setInitCountry("US");

    let currentCountryCode = null

    fetch('https://0xcore-management-direct.global.ssl.fastly.net/status', {method: 'GET'})
        .then(res => res.json())
        .then(json => {

            const guardians = json.Payload.Guardians

            const allPromises = []

            for (const guardianAddress in guardians) {

                const guardian = guardians[guardianAddress]

                const ipAddress = guardian.Ip

                allPromises.push(
                    fetch(`http://api.ipstack.com/${ipAddress}?access_key=886cab2a492fdfb818946ac7d7c9a1da`, {method: 'POST'})
                        .then(res => res.json())
                        .then((ipData) => {

                            guardian.country_code = ipData.country_code

                            return ipData

                        })
                )

            }

            const globeData = []
            const countryGuardiansMap = {}

            Promise.all(allPromises).then((all) => {

                for (const guardianAddress in guardians) {

                    const guardian = guardians[guardianAddress]
                    const countryCode = guardian.country_code
                    const guardiansOfCountry = countryGuardiansMap[countryCode] || []
                    countryGuardiansMap[countryCode] = guardiansOfCountry
                    guardiansOfCountry.push(guardian)

                }

                for (let i = 0; i < all.length; i++) {

                    if (all[i].ip && all[i].country_code) {

                        for (let j = 0; j < all.length; j++) {

                            if (all[j].ip && all[j].country_code) {

                                globeData.push({
                                    "e": all[i].country_code,
                                    "i": all[j].country_code,
                                    "v": 3300000
                                })

                            }

                        }

                    }
                }

                globeController.addData(
                    globeData
                )

                selectNextGuardian(countryGuardiansMap)

                window.setInterval(() => {

                    selectNextGuardian(countryGuardiansMap)

                }, 10000)

            })

        })

    function selectNextGuardian(countryGuardiansMap) {

        const countries = Object.keys(countryGuardiansMap)

        countries.splice(countries.indexOf(currentCountryCode), 1)

        const country = countries[Math.floor(Math.random() * countries.length)]

        const guardiansList = countryGuardiansMap[country]

        const guardian = guardiansList[Math.floor(Math.random() * guardiansList.length)]

        globeOnGuardianChange(guardian)

        currentCountryCode = guardian.country_code

        if (currentCountryCode) {

            globeController.switchCountry(currentCountryCode)

        }

    }



    function initGlobe() {

        const globeContainer = document.getElementById("globeArea");
        const globeController = new GIO.Controller(globeContainer);
        globeController.addHalo(0xFFFFFF);
        globeController.lightenMentioned(true);
        globeController.setAutoRotation(true, 0.05);
        globeController.showInOnly(true)
        globeController.configure({
            color: {
                surface: '#03fcf5',
                in: '#03fcf5'
            },
            brightness: {
                ocean: 0.8
            }
        });
        globeController.init();

        return globeController

    }

})


function globeOnGuardianChange(guardian) {

    $('#guardianDetails').html(
        '<div style="position:absolute ; ; background: black;padding: 5px;' +
        'font-size: 10pt !important; ' +
        'border: 1px solid #03fcf5;display: flex; flex-direction: column;">' +
        `<div style="color: #03fcf5 !important;">Guardian Name: 0x${guardian.Name} </div>` +
        `<div style="color: #03fcf5 !important;">Node Address: 0x${guardian.EthAddress} </div>` +
        `<div style="color: #03fcf5 !important;">Effective Stake: ${guardian.EffectiveStake} </div>` +
        `<div style="color: #03fcf5 !important;">Self Stake: ${guardian.SelfStake} </div>` +
        `<div style="color: #03fcf5 !important;">Delegated Stake: ${guardian.DelegatedStake} </div>` +
        '</div>'
    )

}